// Generated by CoffeeScript 1.3.3

/*
#Sets up the drawing callback to use the requestAnimationFrame if possible
#otherwise falls back on a setTimeout
*/


(function() {
  var Cell, Color, Direction, GameScreen, TitleScreen, Window, clear_context, draw_cell, initialize, keyboard_callback, raf, run,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  raf = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame;

  window.animLoop = function(render, element) {
    var last_frame, running, window_loop;
    running = void 0;
    last_frame = new Date;
    window_loop = function(now) {
      var deltaT;
      if (running === false) {
        return;
      }
      if (raf) {
        raf(window_loop, element);
      } else {
        setTimeout(window_loop, 16);
      }
      now = now && now > 1e4 ? now : +(new Date);
      deltaT = now - last_frame;
      if (deltaT < 160) {
        running = render(deltaT, now);
      }
      return last_frame = now;
    };
    return window_loop();
  };

  Direction = {
    RIGHT: 0,
    LEFT: 1,
    UP: 2,
    DOWN: 3,
    opposite: function(dir) {
      if (dir === Direction.RIGHT) {
        return Direction.LEFT;
      } else if (dir === Direction.LEFT) {
        return Direction.RIGHT;
      } else if (dir === Direction.UP) {
        return Direction.DOWN;
      } else if (dir === Direction.DOWN) {
        return Direction.UP;
      }
    }
  };

  Color = {
    WHITE: "#ffffff",
    BLACK: "#000000",
    GREEN: "#00ff00",
    BLUE: "#0000ff",
    GRAY: "#dddddd"
  };

  Window = {
    COLS: 40,
    ROWS: 40,
    WIDTH: 400,
    HEIGHT: 400,
    FPS: 60,
    div: {},
    context: {},
    screen: {}
  };

  Cell = {
    WIDTH: Math.floor(Window.WIDTH / Window.COLS),
    HEIGHT: Math.floor(Window.HEIGHT / Window.ROWS)
  };

  GameScreen = {
    snake: {
      reset: false,
      cells: [],
      direction: Direction.RIGHT,
      move_interval: 100,
      last_move: 0,
      eaten: 0,
      growth: 0,
      bitmap: void 0,
      head: function() {
        return this.cells[0];
      }
    },
    food: {
      cell: [],
      bitmap: void 0
    },
    initialize: function() {
      var c;
      this._init_snake();
      this.snake.bitmap = document.createElement('canvas');
      this.snake.bitmap.width = Cell.WIDTH;
      this.snake.bitmap.height = Cell.HEIGHT;
      c = this.snake.bitmap.getContext('2d');
      draw_cell([0, 0], c);
      this._init_food();
      this.food.bitmap = document.createElement('canvas');
      this.food.bitmap.width = Cell.WIDTH;
      this.food.bitmap.height = Cell.HEIGHT;
      c = this.food.bitmap.getContext('2d');
      draw_cell([0, 0], c);
      Window.div.html('bottom', "<div id='snake_score'></div>");
      return this._update_score();
    },
    run: function(time_delta, now) {
      this.update(time_delta, now);
      clear_context();
      return this.draw();
    },
    draw: function() {
      var c, _i, _len, _ref;
      _ref = this.snake.cells;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        c = _ref[_i];
        Window.context.drawImage(this.snake.bitmap, c[0] * Cell.WIDTH, c[1] * Cell.HEIGHT);
      }
      c = this.food.cell;
      return Window.context.drawImage(this.food.bitmap, c[0] * Cell.WIDTH, c[1] * Cell.HEIGHT);
    },
    update: function(time_delta, now) {
      this._move_snake(time_delta, now);
      return this._eat_food();
    },
    keyboard_callback: function(event) {
      var s;
      s = this.snake;
      if (event.keyCode === 37 && Direction.opposite(s.direction) !== Direction.LEFT) {
        return s.direction = Direction.LEFT;
      } else if (event.keyCode === 38 && Direction.opposite(s.direction) !== Direction.UP) {
        return s.direction = Direction.UP;
      } else if (event.keyCode === 39 && Direction.opposite(s.direction) !== Direction.RIGHT) {
        return s.direction = Direction.RIGHT;
      } else if (event.keyCode === 40 && Direction.opposite(s.direction) !== Direction.DOWN) {
        return s.direction = Direction.DOWN;
      }
    },
    _init_food: function() {
      var _ref;
      this.food.cell = [Math.floor(Math.random() * Window.COLS), Math.floor(Math.random() * Window.ROWS)];
      if (_ref = this.food.cell, __indexOf.call(this.snake.cells, _ref) >= 0) {
        return this._init_food();
      }
    },
    _init_snake: function() {
      var i;
      if (Window.COLS > 5) {
        this.snake.cells = (function() {
          var _i, _results;
          _results = [];
          for (i = _i = 5; _i >= 0; i = --_i) {
            _results.push([i, 0]);
          }
          return _results;
        })();
      } else {
        this.snake.cells = [];
      }
      this.snake.direction = Direction.RIGHT;
      this.snake.last_move = +new Date();
      this.snake.reset = false;
      this.snake.eaten = 0;
      return this.snake.growth = 0;
    },
    _update_score: function() {
      var score;
      score = "Score: " + this.snake.eaten.toString();
      return x$('#snake_score').html(score);
    },
    _move_snake: function(time_delta, now) {
      var front;
      if (this.snake.reset) {
        this._reset_entities();
        return;
      }
      if ((now - this.snake.last_move) < this.snake.move_interval) {
        return;
      }
      front = this.snake.head();
      if (this.snake.direction === Direction.RIGHT) {
        front = [front[0] + 1, front[1]];
      } else if (this.snake.direction === Direction.LEFT) {
        front = [front[0] - 1, front[1]];
      } else if (this.snake.direction === Direction.UP) {
        front = [front[0], front[1] - 1];
      } else if (this.snake.direction === Direction.DOWN) {
        front = [front[0], front[1] + 1];
      }
      if (!this.snake.growth) {
        this.snake.cells.pop();
      } else {
        this.snake.growth = this.snake.growth - 1;
      }
      this.snake.cells.unshift(front);
      this.snake.last_move = now;
      if (front[0] >= Window.COLS || front[0] < 0 || front[1] >= Window.ROWS || front[1] < 0) {
        this.snake.reset = true;
      }
      return this.snake.reset = this.snake.reset || this._snake_hits_self();
    },
    _snake_hits_self: function() {
      var c, collide_count, front, _i, _len, _ref;
      front = this.snake.head();
      collide_count = 0;
      _ref = this.snake.cells;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        c = _ref[_i];
        if (front[0] === c[0] && front[1] === c[1]) {
          collide_count = collide_count + 1;
          if (1 < collide_count) {
            return true;
          }
        }
      }
      return false;
    },
    _reset_entities: function() {
      this._init_snake();
      this._init_food();
      return this._update_score();
    },
    _eat_food: function() {
      var front;
      front = this.snake.head();
      if (front[0] === this.food.cell[0] && front[1] === this.food.cell[1]) {
        this.snake.eaten = this.snake.eaten + 1;
        this.snake.growth = this.snake.eaten;
        this._init_food();
        return this._update_score();
      }
    }
  };

  TitleScreen = {
    title_bitmap: void 0,
    play_button: {
      pos: [],
      bitmap: void 0
    },
    initialize: function() {
      var bitmap, c;
      console.log('init');
      this.title_bitmap = document.createElement('canvas');
      this.title_bitmap.width = Window.WIDTH;
      this.title_bitmap.height = Window.HEIGHT / 4 + 10;
      c = this.title_bitmap.getContext('2d');
      c.textAlign = "center";
      c.font = (Window.HEIGHT / 4).toString() + "px Sans-Serif";
      c.fillStyle = "blue";
      c.fillText("Snake", Window.WIDTH / 2, Window.HEIGHT / 4);
      bitmap = document.createElement('canvas');
      bitmap.width = Window.WIDTH;
      bitmap.height = Window.HEIGHT / 6;
      c = bitmap.getContext('2d');
      c.textAlign = 'center';
      c.font = (Window.HEIGHT / 12).toString() + "px Sans-Serif";
      c.fillText("Press Space To Play", Window.WIDTH / 2, Window.HEIGHT / 8);
      this.play_button.bitmap = bitmap;
      return this.play_button.pos = [0, 2 * Window.HEIGHT / 4];
    },
    run: function(time_delta, now) {
      this.update(time_delta, now);
      return this.draw();
    },
    update: function(time_delta, now) {
      return null;
    },
    draw: function() {
      var c;
      clear_context();
      Window.context.drawImage(this.title_bitmap, 0, 0);
      c = this.play_button.pos;
      return Window.context.drawImage(this.play_button.bitmap, c[0], c[1]);
    },
    keyboard_callback: function(event) {
      console.log(event.keyCode);
      if (event.keyCode === 32) {
        return Window.screen = GameScreen;
      }
    }
  };

  draw_cell = function(cell, context) {
    context.fillStyle = Color.WHITE;
    context.strokeStyle = Color.BLUE;
    context.fillRect(cell[0] * Cell.WIDTH, cell[1] * Cell.HEIGHT, Cell.WIDTH, Cell.HEIGHT);
    return context.strokeRect(cell[0] * Cell.WIDTH, cell[1] * Cell.HEIGHT, Cell.WIDTH, Cell.HEIGHT);
  };

  clear_context = function() {
    Window.context.fillStyle = Color.WHITE;
    Window.context.strokeStyle = Color.BLACK;
    Window.context.fillRect(0, 0, Window.WIDTH, Window.HEIGHT);
    return Window.context.strokeRect(0, 0, Window.WIDTH, Window.HEIGHT);
  };

  keyboard_callback = function(event) {
    event.preventDefault();
    if (Window.screen.keyboard_callback != null) {
      return Window.screen.keyboard_callback(event);
    }
  };

  run = function(time_delta, now) {
    return Window.screen.run(time_delta, now);
  };

  initialize = function(div_selector) {
    var canvas, canvas_stuff, context, div;
    div = x$(div_selector);
    div.css({
      border: '2px solid black',
      width: Window.WIDTH.toString() + "px"
    });
    canvas_stuff = "<canvas id='snake_canvas' tabindex='1'></canvas>";
    div.html(canvas_stuff);
    canvas = x$("#snake_canvas").attr('width', Window.WIDTH).attr('height', Window.HEIGHT);
    x$(document).on('keydown', keyboard_callback);
    context = canvas.first().getContext("2d");
    canvas.first().focus();
    Window.context = context;
    Window.div = div;
    TitleScreen.initialize();
    GameScreen.initialize();
    Window.screen = TitleScreen;
    return window.animLoop(run);
  };

  x$.ready(function() {
    return initialize("#snake");
  });

}).call(this);
